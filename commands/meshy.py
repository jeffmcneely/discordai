#!/usr/bin/env python3
"""
Meshy Commands Module
Handles Meshy.ai text-to-3D generation commands
"""

import discord
from discord.ext import commands
import logging
import os
import aiohttp
import json
import asyncio
from datetime import datetime, timezone
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

logger = logging.getLogger(__name__)

class MeshyCommands(commands.Cog):
    """Meshy.ai command group for Discord bot"""
    
    def __init__(self, bot):
        self.bot = bot
        # Meshy.ai API configuration
        self.meshy_api_key = os.getenv('MESHY_API_KEY')
        self.meshy_base_url = "https://api.meshy.ai"
        self.max_prompt_length = 600
        
        # Check if Meshy API is configured
        self.meshy_configured = bool(self.meshy_api_key)
        
        if not self.meshy_configured:
            logger.warning("Meshy.ai API key not configured")
    
    @commands.command(name='meshy')
    async def meshy(self, ctx, *, prompt: str = None):
        """
        Generate a 3D model using Meshy.ai text-to-3D API
        Usage: !meshy <description of 3D object>
        """
        if not self.meshy_configured:
            embed = discord.Embed(
                title="‚ùå Meshy.ai Not Configured",
                description="Meshy.ai API key is not configured. Please set up your .env file with:\n"
                           "```\n"
                           "MESHY_API_KEY=your_meshy_api_key\n"
                           "```",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        if not prompt:
            await ctx.send("‚ùå Please provide a description for the 3D model. Example: `!meshy a cute cartoon cat`")
            return
        
        # Validate prompt length
        if len(prompt) > self.max_prompt_length:
            await ctx.send(f"‚ùå Prompt too long (max {self.max_prompt_length} characters). Your prompt is {len(prompt)} characters.")
            return
        
        try:
            # Send initial response
            await ctx.send("üé® Generating 3D model with Meshy.ai...\n"
                          f"**Prompt:** {prompt}\n"
                          "*This may take a few minutes...*")
            
            # Generate 3D model
            result = await self.generate_3d_model(prompt, ctx.author.name)
            
            if result and result.get('model_urls'):
                # Create embed with results
                embed = discord.Embed(
                    title="üé® 3D Model Generated!",
                    description=f"**Prompt:** {prompt}",
                    color=0x00ff88,
                    timestamp=datetime.now(timezone.utc)
                )
                
                embed.add_field(
                    name="üìä Model Details",
                    value=f"**Task ID:** {result.get('task_id', 'N/A')}\n"
                          f"**Status:** {result.get('status', 'Completed')}\n"
                          f"**Generated by:** {ctx.author.display_name}",
                    inline=False
                )
                
                # Add model URLs
                model_urls = result['model_urls']
                if model_urls.get('glb'):
                    embed.add_field(
                        name="üîó GLB Model",
                        value=f"[Download GLB]({model_urls['glb']})",
                        inline=True
                    )
                if model_urls.get('gltf'):
                    embed.add_field(
                        name="üîó GLTF Model",
                        value=f"[Download GLTF]({model_urls['gltf']})",
                        inline=True
                    )
                if model_urls.get('usdz'):
                    embed.add_field(
                        name="üîó USDZ Model",
                        value=f"[Download USDZ]({model_urls['usdz']})",
                        inline=True
                    )
                if model_urls.get('fbx'):
                    embed.add_field(
                        name="üîó FBX Model",
                        value=f"[Download FBX]({model_urls['fbx']})",
                        inline=True
                    )
                if model_urls.get('obj'):
                    embed.add_field(
                        name="üîó OBJ Model",
                        value=f"[Download OBJ]({model_urls['obj']})",
                        inline=True
                    )
                
                embed.set_footer(text="Powered by Meshy.ai")
                await ctx.send(embed=embed)
                
            elif result and result.get('task_id'):
                # Model is still processing
                embed = discord.Embed(
                    title="‚è≥ 3D Model Processing",
                    description=f"Your 3D model is being generated!\n\n**Prompt:** {prompt}",
                    color=0xffa500,
                    timestamp=datetime.now(timezone.utc)
                )
                
                embed.add_field(
                    name="üìã Task Details",
                    value=f"**Task ID:** {result['task_id']}\n"
                          f"**Status:** {result.get('status', 'Processing')}\n"
                          "**Check back in a few minutes for results!**",
                    inline=False
                )
                
                embed.set_footer(text="Powered by Meshy.ai")
                await ctx.send(embed=embed)
                
            else:
                await ctx.send("‚ùå Failed to generate 3D model. No result returned from Meshy.ai API.")
                
        except Exception as e:
            logger.error(f"Error in meshy command: {e}")
            await ctx.send(f"‚ùå Error generating 3D model: {e}")
    
    async def generate_3d_model(self, prompt: str, username: str):
        """Generate 3D model using Meshy.ai API"""
        try:
            headers = {
                'Authorization': f'Bearer {self.meshy_api_key}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                'mode': 'preview',  # Use preview mode for faster generation
                'prompt': prompt,
                'art_style': 'realistic',  # Can be: realistic or sculpture
                'should_remesh': True
                }
            
            logger.info(f"Meshy.ai request - User: {username}, Prompt: {prompt}")
            
            async with aiohttp.ClientSession() as session:
                # Step 1: Create the 3D generation task
                async with session.post(
                    f"{self.meshy_base_url}/v2/text-to-3d",
                    headers=headers,
                    json=payload
                ) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"Meshy.ai API error: {response.status} - {error_text}")
                        raise Exception(f"Meshy.ai API error: {response.status}")
                    
                    task_data = await response.json()
                    task_id = task_data.get('result')
                    
                    if not task_id:
                        logger.error(f"No task ID returned from Meshy.ai: {task_data}")
                        return None
                    
                    logger.info(f"Meshy.ai task created - Task ID: {task_id}")
                
                # Step 2: Poll for completion (with timeout)
                max_attempts = 60  # 10 minutes max (60 * 10 seconds)
                attempt = 0
                
                while attempt < max_attempts:
                    await asyncio.sleep(10)  # Wait 10 seconds between checks
                    
                    async with session.get(
                        f"{self.meshy_base_url}/v2/text-to-3d/{task_id}",
                        headers=headers
                    ) as status_response:
                        if status_response.status not in [200, 202]:
                            logger.warning(f"Failed to check task status: {status_response.status}")
                            continue
                        
                        status_data = await status_response.json()
                        status = status_data.get('status')
                        
                        logger.debug(f"Task {task_id} status: {status}")
                        
                        if status == 'SUCCEEDED':
                            # Task completed successfully
                            model_urls = status_data.get('model_urls', {})
                            return {
                                'task_id': task_id,
                                'status': status,
                                'model_urls': model_urls,
                                'progress': status_data.get('progress', 100)
                            }
                        elif status in ['FAILED', 'EXPIRED']:
                            # Task failed or expired
                            logger.error(f"Meshy.ai task {task_id} failed with status: {status}")
                            return {
                                'task_id': task_id,
                                'status': status,
                                'error': status_data.get('message', 'Unknown error')
                            }
                        elif status == 'PROCESSING':
                            # Still processing, continue polling
                            attempt += 1
                            continue
                        else:
                            logger.warning(f"Unknown task status: {status}")
                            attempt += 1
                
                # Timeout reached
                logger.warning(f"Meshy.ai task {task_id} timed out after {max_attempts * 5} seconds")
                return {
                    'task_id': task_id,
                    'status': 'TIMEOUT',
                    'error': f'Task timed out after {max_attempts * 5} seconds'
                }
                
        except Exception as e:
            logger.error(f"Error generating 3D model with Meshy.ai: {e}")
            raise
    
    @commands.command(name='meshy_status')
    async def meshy_status(self, ctx):
        """Check Meshy.ai API connection status"""
        embed = discord.Embed(
            title="üîß Meshy.ai API Status",
            color=0x00ff88
        )
        
        # Check configuration
        embed.add_field(
            name="Configuration",
            value="‚úÖ Configured" if self.meshy_configured else "‚ùå Not Configured",
            inline=True
        )
        
        # Check API key
        embed.add_field(
            name="API Key",
            value="‚úÖ Set" if self.meshy_api_key else "‚ùå Missing",
            inline=True
        )
        
        # Test API connection if configured
        if self.meshy_configured:
            try:
                test_result = await self.test_meshy_connection()
                embed.add_field(
                    name="API Connection",
                    value="‚úÖ Connected" if test_result else "‚ùå Failed",
                    inline=True
                )
            except Exception as e:
                embed.add_field(
                    name="API Connection",
                    value=f"‚ùå Error: {e}",
                    inline=True
                )
        else:
            embed.add_field(
                name="API Connection",
                value="‚ùå Cannot test - API key missing",
                inline=True
            )
        
        embed.add_field(
            name="Max Prompt Length",
            value=f"{self.max_prompt_length} characters",
            inline=True
        )
        
        embed.set_footer(text="Meshy.ai Text-to-3D Generation")
        
        await ctx.send(embed=embed)
    
    async def test_meshy_connection(self):
        """Test Meshy.ai API connection"""
        try:
            headers = {
                'Authorization': f'Bearer {self.meshy_api_key}',
                'Content-Type': 'application/json'
            }
            
            # Simple test by checking API status or making a minimal request
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.meshy_base_url}/v1/me",
                    headers=headers
                ) as response:
                    return response.status == 200
                    
        except Exception as e:
            logger.error(f"Error testing Meshy.ai connection: {e}")
            return False

async def setup(bot):
    """Setup function to add the cog to the bot"""
    await bot.add_cog(MeshyCommands(bot))